generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int          @id @default(autoincrement())
  email                String       @unique
  password             String
  createdAt            DateTime     @default(now())
  confirmationToken    String?
  isConfirmed          Boolean      @default(false)
  updatedAt            DateTime     @updatedAt
  CNIC                 String       @unique
  age                  Int
  firstName            String
  gender               String
  lastName             String
  role                 String       @default("STUDENT")
  verificationCode     String?
  resetPasswordExpires DateTime?
  resetPasswordToken   String?
  profilePicture       String?
  classes              Class[]      @relation("TeacherClasses")
  enrolledClasses      Enrollment[] @relation("StudentEnrollments")
  Stream               Stream[]
  submissions          Submission[] @relation("StudentSubmissions")
}

model Class {
  id            Int            @id @default(autoincrement())
  name          String
  section       String?
  subject       String?
  room          String?
  classCode     String         @unique
  createdAt     DateTime       @default(now())
  teacherId     Int
  activities    Activity[]
  announcements Announcement[]
  assignments   Assignment[]
  teacher       User           @relation("TeacherClasses", fields: [teacherId], references: [id])
  enrollments   Enrollment[]   @relation("ClassEnrollments")
  Stream        Stream[]
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  studentId Int
  classId   Int
  createdAt DateTime @default(now())
  class     Class    @relation("ClassEnrollments", fields: [classId], references: [id])
  student   User     @relation("StudentEnrollments", fields: [studentId], references: [id])
}

model Announcement {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())
  classId   Int
  class     Class    @relation(fields: [classId], references: [id])
}

model Activity {
  id        Int      @id @default(autoincrement())
  text      String
  createdAt DateTime @default(now())
  classId   Int
  class     Class    @relation(fields: [classId], references: [id])
}

model Assignment {
  id          Int          @id @default(autoincrement())
  title       String
  description String
  dueDate     DateTime
  classId     Int
  createdAt   DateTime     @default(now())
  fileUrl     String?
  class       Class        @relation(fields: [classId], references: [id])
  Stream      Stream?
  submissions Submission[] @relation("AssignmentSubmissions")
  testCases   TestCase[]    @relation("AssignmentTestCases") 
}

model Submission {
  id           Int        @id @default(autoincrement())
  studentId    Int
  assignmentId Int
  fileUrl      String
  submittedAt  DateTime   @default(now())
  assignment   Assignment @relation("AssignmentSubmissions", fields: [assignmentId], references: [id])
  student      User       @relation("StudentSubmissions", fields: [studentId], references: [id])
}

model Stream {
  id           Int         @id @default(autoincrement())
  classId      Int
  type         String
  title        String
  description  String?
  fileUrl      String?
  assignmentId Int?        @unique
  createdAt    DateTime    @default(now())
  userId       Int
  Assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  Class        Class       @relation(fields: [classId], references: [id])
  User         User        @relation(fields: [userId], references: [id])
}
model TestCase {
  id             Int    @id @default(autoincrement())
  assignmentId   Int
  input          String
  expectedOutput String
  assignment     Assignment @relation(fields: [assignmentId], references: [id], name: "AssignmentTestCases")
}

model Evaluation {
  id           Int    @id @default(autoincrement())
  studentId    Int
  assignmentId Int
  results      String
}